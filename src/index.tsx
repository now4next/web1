import { Hono } from 'hono'
import { cors } from 'hono/cors'
import { serveStatic } from 'hono/cloudflare-workers'
import type { Bindings, Competency, CompetencyModel, AIGenerationRequest } from './types'

const app = new Hono<{ Bindings: Bindings }>()

// CORS ÌôúÏÑ±Ìôî (API Ï†ÑÏö©)
app.use('/api/*', cors())

// Ï†ïÏ†Å ÌååÏùº Ï†úÍ≥µ
app.use('/static/*', serveStatic({ root: './public' }))

// ============================================================================
// API Routes
// ============================================================================

// Ïó≠Îüâ Î™®Îç∏ Î™©Î°ù Ï°∞Ìöå
app.get('/api/competency-models', async (c) => {
  const db = c.env.DB
  const { results } = await db.prepare(`
    SELECT * FROM competency_models ORDER BY created_at DESC
  `).all()
  return c.json({ success: true, data: results })
})

// Ïó≠Îüâ Î™®Îç∏ ÏÉùÏÑ±
app.post('/api/competency-models', async (c) => {
  const db = c.env.DB
  const body = await c.req.json<CompetencyModel>()
  
  const result = await db.prepare(`
    INSERT INTO competency_models (name, type, description, target_level)
    VALUES (?, ?, ?, ?)
  `).bind(body.name, body.type, body.description, body.target_level).run()
  
  return c.json({ success: true, id: result.meta.last_row_id })
})

// Ïó≠Îüâ ÌÇ§ÏõåÎìú Í≤ÄÏÉâ (Î®ºÏ†Ä Ï†ïÏùòÌï¥Ïïº Ìï®!)
app.get('/api/competencies/search', async (c) => {
  const db = c.env.DB
  const query = c.req.query('q') || ''
  
  const { results } = await db.prepare(`
    SELECT c.*, cm.name as model_name, cm.type as model_type
    FROM competencies c
    JOIN competency_models cm ON c.model_id = cm.id
    WHERE c.keyword LIKE ? OR c.description LIKE ?
    ORDER BY c.created_at DESC
  `).bind(`%${query}%`, `%${query}%`).all()
  
  return c.json({ success: true, data: results })
})

// ÌäπÏ†ï Î™®Îç∏Ïùò Ïó≠Îüâ ÌÇ§ÏõåÎìú Ï°∞Ìöå
app.get('/api/competencies/:modelId', async (c) => {
  const db = c.env.DB
  const modelId = c.req.param('modelId')
  
  const { results } = await db.prepare(`
    SELECT c.*, cm.name as model_name, cm.type as model_type
    FROM competencies c
    JOIN competency_models cm ON c.model_id = cm.id
    WHERE c.model_id = ?
    ORDER BY c.created_at DESC
  `).bind(modelId).all()
  
  return c.json({ success: true, data: results })
})

// Ïó≠Îüâ ÌÇ§ÏõåÎìú Ï∂îÍ∞Ä
app.post('/api/competencies', async (c) => {
  const db = c.env.DB
  const body = await c.req.json<Competency>()
  
  const result = await db.prepare(`
    INSERT INTO competencies (model_id, keyword, description)
    VALUES (?, ?, ?)
  `).bind(body.model_id, body.keyword, body.description).run()
  
  return c.json({ success: true, id: result.meta.last_row_id })
})

// AI Î¨∏Ìï≠ ÏÉùÏÑ± API
app.post('/api/ai/generate-questions', async (c) => {
  const db = c.env.DB
  const apiKey = c.env.OPENAI_API_KEY
  const body = await c.req.json<AIGenerationRequest>()
  
  // Îç∞Î™® Î™®Îìú: API ÌÇ§Í∞Ä ÏóÜÏúºÎ©¥ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
  if (!apiKey || apiKey === 'your-openai-api-key-here') {
    const demoData = {
      behavioral_indicators: body.competency_keywords.map(keyword => ({
        competency: keyword,
        indicators: [
          `${keyword} Í¥ÄÎ†® ÏóÖÎ¨¥Î•º Ï≤¥Í≥ÑÏ†ÅÏúºÎ°ú ÏàòÌñâÌï©ÎãàÎã§`,
          `${keyword}ÏùÑ ÌôúÏö©ÌïòÏó¨ ÌåÄ Î™©Ìëú Îã¨ÏÑ±Ïóê Í∏∞Ïó¨Ìï©ÎãàÎã§`,
          `${keyword} Ïó≠ÎüâÏùÑ ÏßÄÏÜçÏ†ÅÏúºÎ°ú Í∞úÎ∞úÌïòÍ≥† Ìñ•ÏÉÅÏãúÌÇµÎãàÎã§`
        ]
      })),
      questions: body.competency_keywords.flatMap(keyword => [
        {
          competency: keyword,
          question_text: `ÎÇòÎäî ${keyword} Ïó≠ÎüâÏùÑ Ìö®Í≥ºÏ†ÅÏúºÎ°ú Î∞úÌúòÌïúÎã§`,
          question_type: body.question_type
        },
        {
          competency: keyword,
          question_text: `ÎÇòÎäî ${keyword}Í≥º Í¥ÄÎ†®Îêú ÏóÖÎ¨¥Î•º ÏûêÏã†ÏûàÍ≤å ÏàòÌñâÌï† Ïàò ÏûàÎã§`,
          question_type: body.question_type
        },
        {
          competency: keyword,
          question_text: `ÎÇòÎäî ${keyword} Ïó≠Îüâ Í∞úÎ∞úÏùÑ ÏúÑÌï¥ ÎÖ∏Î†•ÌïòÍ≥† ÏûàÎã§`,
          question_type: body.question_type
        },
        {
          competency: keyword,
          question_text: `ÎèôÎ£åÎì§ÏùÄ ÎÇòÏùò ${keyword} Ïó≠ÎüâÏùÑ Ïù∏Ï†ïÌïúÎã§`,
          question_type: body.question_type
        },
        {
          competency: keyword,
          question_text: `ÎÇòÎäî ${keyword}ÏùÑ ÌôúÏö©ÌïòÏó¨ Ï°∞ÏßÅ ÏÑ±Í≥ºÏóê Í∏∞Ïó¨ÌïúÎã§`,
          question_type: body.question_type
        }
      ]),
      guide: `üîç ÏßÑÎã® ÏïàÎÇ¥\n\nÎ≥∏ ÏßÑÎã®ÏùÄ ${body.competency_keywords.join(', ')} Ïó≠ÎüâÏùÑ ÌèâÍ∞ÄÌïòÍ∏∞ ÏúÑÌïú ${body.question_type === 'self' ? 'ÏûêÍ∞ÄÏßÑÎã®' : body.question_type === 'multi' ? 'Îã§Î©¥ÌèâÍ∞Ä' : 'ÏÑ§Î¨∏Ï°∞ÏÇ¨'}ÏûÖÎãàÎã§.\n\n‚úÖ Î™©Ï†Å:\n- ÌòÑÏû¨ Ïó≠Îüâ ÏàòÏ§Ä ÌååÏïÖ\n- Í∞ïÏ†êÍ≥º Í∞úÎ∞úÏòÅÏó≠ ÌôïÏù∏\n- Í∞úÏù∏ ÏÑ±Ïû• Î∞©Ìñ• ÏÑ§Ï†ï\n\n‚ö†Ô∏è Ïú†ÏùòÏÇ¨Ìï≠:\n- ÏÜîÏßÅÌïòÍ≥† Í∞ùÍ¥ÄÏ†ÅÏúºÎ°ú ÏùëÎãµÌï¥Ï£ºÏÑ∏Ïöî\n- ÏµúÍ∑º 6Í∞úÏõî ÎèôÏïàÏùò Í≤ΩÌóòÏùÑ Î∞îÌÉïÏúºÎ°ú ÌèâÍ∞ÄÌïòÏÑ∏Ïöî\n- Î™®Îì† Î¨∏Ìï≠Ïóê Îπ†ÏßêÏóÜÏù¥ ÏùëÎãµÌï¥Ï£ºÏÑ∏Ïöî\n\nüìã ÌîÑÎ°úÏÑ∏Ïä§:\n1. ÏßÑÎã® Ïã§Ïãú (ÏïΩ 10-15Î∂Ñ ÏÜåÏöî)\n2. Í≤∞Í≥º Î∂ÑÏÑù Î∞è Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±\n3. AI ÏΩîÏπ≠ Î∞è Í∞úÎ∞ú Í≥ÑÌöç ÏàòÎ¶Ω\n\n‚öôÔ∏è Îç∞Î™® Î™®Îìú: Ïã§Ï†ú AI ÏÉùÏÑ±ÏùÑ ÏõêÌïòÏãúÎ©¥ .dev.vars ÌååÏùºÏóê OpenAI API ÌÇ§Î•º ÏÑ§Ï†ïÌïòÏÑ∏Ïöî.`
    }
    
    return c.json({ success: true, data: demoData, demo: true })
  }
  
  // OpenAI API Ìò∏Ï∂ú
  const prompt = `ÎãπÏã†ÏùÄ Ï°∞ÏßÅ Ïó≠Îüâ ÏßÑÎã® Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. Îã§Ïùå Ïó≠ÎüâÎì§Ïóê ÎåÄÌïú ÏßÑÎã® Î¨∏Ìï≠ÏùÑ ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.

Ïó≠Îüâ ÌÇ§ÏõåÎìú: ${body.competency_keywords.join(', ')}
ÎåÄÏÉÅ ÏßÅÍ∏â: ${body.target_level}
ÏßÑÎã® Ïú†Ìòï: ${body.question_type}

Í∞Å Ïó≠ÎüâÎßàÎã§ Îã§ÏùåÏùÑ ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:
1. ÌñâÎèô ÏßÄÌëú (Behavioral Indicators) 3Í∞ú
2. ÏßÑÎã® Î¨∏Ìï≠ 5Í∞ú

ÏùëÎãµ ÌòïÏãù (JSON):
{
  "behavioral_indicators": [
    {
      "competency": "Ïó≠ÎüâÎ™Ö",
      "indicators": ["ÏßÄÌëú1", "ÏßÄÌëú2", "ÏßÄÌëú3"]
    }
  ],
  "questions": [
    {
      "competency": "Ïó≠ÎüâÎ™Ö",
      "question_text": "Î¨∏Ìï≠ ÎÇ¥Ïö©",
      "question_type": "${body.question_type}"
    }
  ],
  "guide": "ÏßÑÎã® ÏïàÎÇ¥Î¨∏ (Î™©Ï†Å, Ïú†ÏùòÏÇ¨Ìï≠, ÌîÑÎ°úÏÑ∏Ïä§ Ìè¨Ìï®)"
}`

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: 'ÎãπÏã†ÏùÄ Ï°∞ÏßÅ Ïó≠Îüâ ÏßÑÎã® Î∞è Ïù∏Ïû¨Í∞úÎ∞ú Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        response_format: { type: 'json_object' }
      })
    })
    
    if (!response.ok) {
      const error = await response.text()
      return c.json({ success: false, error: `OpenAI API Ïò§Î•ò: ${error}` }, 500)
    }
    
    const data = await response.json() as any
    const content = JSON.parse(data.choices[0].message.content)
    
    return c.json({ success: true, data: content })
  } catch (error: any) {
    return c.json({ success: false, error: error.message }, 500)
  }
})

// ÏßÑÎã® ÏÑ∏ÏÖò ÏÉùÏÑ±
app.post('/api/assessment-sessions', async (c) => {
  const db = c.env.DB
  const body = await c.req.json()
  
  const result = await db.prepare(`
    INSERT INTO assessment_sessions (session_name, session_type, target_level, status)
    VALUES (?, ?, ?, ?)
  `).bind(body.session_name, body.session_type, body.target_level, 'draft').run()
  
  return c.json({ success: true, id: result.meta.last_row_id })
})

// ÏßÑÎã® ÏÑ∏ÏÖò Î™©Î°ù Ï°∞Ìöå
app.get('/api/assessment-sessions', async (c) => {
  const db = c.env.DB
  const { results } = await db.prepare(`
    SELECT * FROM assessment_sessions ORDER BY created_at DESC
  `).all()
  return c.json({ success: true, data: results })
})

// ÏÑ∏ÏÖò-Ïó≠Îüâ Îß§Ìïë
app.post('/api/session-competencies', async (c) => {
  const db = c.env.DB
  const body = await c.req.json()
  
  const result = await db.prepare(`
    INSERT INTO session_competencies (session_id, competency_id)
    VALUES (?, ?)
  `).bind(body.session_id, body.competency_id).run()
  
  return c.json({ success: true, id: result.meta.last_row_id })
})

// ÏßÑÎã® Î¨∏Ìï≠ Î™©Î°ù Ï°∞Ìöå (ÏßÑÎã® Ïã§ÌñâÏö©)
app.get('/api/assessment-questions', async (c) => {
  const db = c.env.DB
  const { results } = await db.prepare(`
    SELECT 
      aq.id,
      aq.question_text,
      aq.question_type,
      aq.scale_type,
      c.keyword as competency,
      c.description as competency_description,
      cm.name as model_name
    FROM assessment_questions aq
    JOIN competencies c ON aq.competency_id = c.id
    JOIN competency_models cm ON c.model_id = cm.id
    ORDER BY cm.name, c.keyword, aq.id
  `).all()
  
  return c.json({ success: true, data: results, count: results.length })
})

// Î¨∏Ìï≠ Ï†ÄÏû• (ÌÇ§ÏõåÎìú Í∏∞Î∞ò)
app.post('/api/assessment-questions-save', async (c) => {
  const db = c.env.DB
  const body = await c.req.json()
  
  // Ïó≠Îüâ ÌÇ§ÏõåÎìúÎ°ú competency_id Ï∞æÍ∏∞
  const competency = await db.prepare(`
    SELECT id FROM competencies WHERE keyword = ?
  `).bind(body.competency_keyword).first()
  
  if (!competency) {
    return c.json({ success: false, error: 'Ïó≠ÎüâÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§' }, 404)
  }
  
  const result = await db.prepare(`
    INSERT INTO assessment_questions (competency_id, question_text, question_type)
    VALUES (?, ?, ?)
  `).bind(competency.id, body.question_text, body.question_type).run()
  
  return c.json({ success: true, id: result.meta.last_row_id })
})

// ÏßÑÎã® ÏùëÎãµ Ï†ÄÏû•
app.post('/api/assessment-responses', async (c) => {
  const db = c.env.DB
  const body = await c.req.json()
  
  // Î®ºÏ†Ä Ìï¥Îãπ Î¨∏Ìï≠ IDÎ•º Ï∞æÍ±∞ÎÇò ÏÉùÏÑ±
  let questionId = body.question_id
  
  if (!questionId) {
    // Î¨∏Ìï≠ ÌÖçÏä§Ìä∏Î°ú Í≤ÄÏÉâ
    const existingQuestion = await db.prepare(`
      SELECT id FROM assessment_questions WHERE question_text = ?
    `).bind(body.question_text).first()
    
    if (existingQuestion) {
      questionId = existingQuestion.id
    } else {
      // Ïó≠ÎüâÏúºÎ°ú competency_id Ï∞æÍ∏∞
      const competency = await db.prepare(`
        SELECT id FROM competencies WHERE keyword = ?
      `).bind(body.competency).first()
      
      if (competency) {
        const newQuestion = await db.prepare(`
          INSERT INTO assessment_questions (competency_id, question_text, question_type)
          VALUES (?, ?, ?)
        `).bind(competency.id, body.question_text, 'self').run()
        
        questionId = newQuestion.meta.last_row_id
      }
    }
  }
  
  const result = await db.prepare(`
    INSERT INTO assessment_responses (session_id, respondent_id, question_id, response_value)
    VALUES (?, ?, ?, ?)
  `).bind(body.session_id, body.respondent_id, questionId, body.response_value).run()
  
  return c.json({ success: true, id: result.meta.last_row_id })
})

// ÏùëÎãµÏûê Îì±Î°ù
app.post('/api/respondents', async (c) => {
  const db = c.env.DB
  const body = await c.req.json()
  
  // Í∏∞Ï°¥ ÏùëÎãµÏûê ÌôïÏù∏
  const existing = await db.prepare(`
    SELECT id FROM respondents WHERE email = ?
  `).bind(body.email).first()
  
  if (existing) {
    return c.json({ success: true, id: existing.id, message: 'Í∏∞Ï°¥ ÏùëÎãµÏûê' })
  }
  
  const result = await db.prepare(`
    INSERT INTO respondents (name, email, department, position, level)
    VALUES (?, ?, ?, ?, ?)
  `).bind(body.name, body.email, body.department, body.position, body.level).run()
  
  return c.json({ success: true, id: result.meta.last_row_id })
})

// ÏùëÎãµÏûê Î™©Î°ù
app.get('/api/respondents', async (c) => {
  const db = c.env.DB
  const { results } = await db.prepare(`
    SELECT * FROM respondents ORDER BY created_at DESC
  `).all()
  return c.json({ success: true, data: results })
})

// ÏùëÎãµÏûêÎ≥Ñ Í≤∞Í≥º Î∂ÑÏÑù
app.get('/api/analysis/:respondentId', async (c) => {
  const db = c.env.DB
  const respondentId = c.req.param('respondentId')
  
  // ÏùëÎãµÏûê Ï†ïÎ≥¥
  const respondent = await db.prepare(`
    SELECT * FROM respondents WHERE id = ?
  `).bind(respondentId).first()
  
  if (!respondent) {
    return c.json({ success: false, error: 'ÏùëÎãµÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§' }, 404)
  }
  
  // Ï†ÑÏ≤¥ ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
  const { results: responses } = await db.prepare(`
    SELECT 
      ar.response_value,
      aq.question_text,
      aq.question_type,
      c.keyword as competency,
      c.description as competency_description
    FROM assessment_responses ar
    JOIN assessment_questions aq ON ar.question_id = aq.id
    JOIN competencies c ON aq.competency_id = c.id
    WHERE ar.respondent_id = ?
    ORDER BY c.keyword, ar.created_at
  `).bind(respondentId).all()
  
  if (!responses || responses.length === 0) {
    return c.json({ success: false, error: 'ÏùëÎãµ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§' }, 404)
  }
  
  // Ïó≠ÎüâÎ≥Ñ Ï†êÏàò Í≥ÑÏÇ∞
  const competencyScores: Record<string, any> = {}
  
  responses.forEach((r: any) => {
    if (!competencyScores[r.competency]) {
      competencyScores[r.competency] = {
        competency: r.competency,
        description: r.competency_description,
        scores: [],
        questions: []
      }
    }
    competencyScores[r.competency].scores.push(r.response_value)
    competencyScores[r.competency].questions.push({
      question_text: r.question_text,
      response_value: r.response_value
    })
  })
  
  // ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
  const analysis = Object.values(competencyScores).map((comp: any) => {
    const scores = comp.scores
    const avg = scores.reduce((a: number, b: number) => a + b, 0) / scores.length
    const max = Math.max(...scores)
    const min = Math.min(...scores)
    
    // ÌëúÏ§ÄÌé∏Ï∞® Í≥ÑÏÇ∞
    const variance = scores.reduce((sum: number, val: number) => 
      sum + Math.pow(val - avg, 2), 0) / scores.length
    const stdDev = Math.sqrt(variance)
    
    return {
      competency: comp.competency,
      description: comp.description,
      average: parseFloat(avg.toFixed(2)),
      max,
      min,
      stdDev: parseFloat(stdDev.toFixed(2)),
      count: scores.length,
      questions: comp.questions
    }
  })
  
  // Ï†ÑÏ≤¥ ÌèâÍ∑†
  const overallAvg = analysis.reduce((sum, a) => sum + a.average, 0) / analysis.length
  
  // Í∞ïÏ†ê/Í∞úÏÑ†ÏòÅÏó≠ ÏãùÎ≥Ñ
  const sortedByScore = [...analysis].sort((a, b) => b.average - a.average)
  const strengths = sortedByScore.slice(0, Math.ceil(sortedByScore.length / 3))
  const improvements = sortedByScore.slice(-Math.ceil(sortedByScore.length / 3))
  
  return c.json({
    success: true,
    data: {
      respondent,
      analysis,
      summary: {
        totalQuestions: responses.length,
        totalCompetencies: analysis.length,
        overallAverage: parseFloat(overallAvg.toFixed(2)),
        highestScore: sortedByScore[0],
        lowestScore: sortedByScore[sortedByScore.length - 1],
        strengths: strengths.map(s => s.competency),
        improvements: improvements.map(i => i.competency)
      }
    }
  })
})

// AI Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±
app.post('/api/analysis/:respondentId/insights', async (c) => {
  const apiKey = c.env.OPENAI_API_KEY
  const respondentId = c.req.param('respondentId')
  const body = await c.req.json()
  
  // Îç∞Î™® Î™®Îìú ÎòêÎäî Ïã§Ï†ú AI ÏÇ¨Ïö©
  if (!apiKey || apiKey === 'your-openai-api-key-here') {
    // Îç∞Î™® Ïù∏ÏÇ¨Ïù¥Ìä∏
    const demoInsights = {
      overall: `${body.respondent.name}ÎãòÏùò Ï†ÑÏ≤¥ ÌèâÍ∑† Ï†êÏàòÎäî ${body.summary.overallAverage}Ï†êÏúºÎ°ú, Ï†ÑÎ∞òÏ†ÅÏúºÎ°ú Ïö∞ÏàòÌïú Ïó≠Îüâ ÏàòÏ§ÄÏùÑ Î≥¥Ïù¥Í≥† ÏûàÏäµÎãàÎã§.`,
      strengths: `ÌäπÌûà ${body.summary.strengths.join(', ')} Ïó≠ÎüâÏóêÏÑú Í∞ïÏ†êÏùÑ Î≥¥Ïù¥Í≥† ÏûàÏäµÎãàÎã§. Ïù¥Îü¨Ìïú Í∞ïÏ†êÏùÑ ÎçîÏö± Î∞úÏ†ÑÏãúÏºú Ï°∞ÏßÅÏùò ÌïµÏã¨ Ïù∏Ïû¨Î°ú ÏÑ±Ïû•Ìï† Ïàò ÏûàÏäµÎãàÎã§.`,
      improvements: `${body.summary.improvements.join(', ')} Ïó≠ÎüâÏùÄ Í∞úÏÑ†Ïù¥ ÌïÑÏöîÌïú ÏòÅÏó≠ÏûÖÎãàÎã§. Ï≤¥Í≥ÑÏ†ÅÏù∏ ÌïôÏäµÍ≥º Ïã§Î¨¥ Í≤ΩÌóòÏùÑ ÌÜµÌï¥ Ìñ•ÏÉÅÏãúÌÇ¨ Ïàò ÏûàÏäµÎãàÎã§.`,
      recommendations: [
        'Í∞ïÏ†ê Ïó≠ÎüâÏùÑ ÌôúÏö©Ìïú ÌîÑÎ°úÏ†ùÌä∏ Ï∞∏Ïó¨ Í∏∞Ìöå ÌôïÎåÄ',
        'Í∞úÏÑ† ÏòÅÏó≠Ïóê ÎåÄÌïú ÎßûÏ∂§Ìòï ÍµêÏú° ÌîÑÎ°úÍ∑∏Îû® ÏàòÍ∞ï',
        'Î©òÌÜ†ÎßÅÏùÑ ÌÜµÌïú Ïã§Î¨¥ ÎÖ∏ÌïòÏö∞ ÏäµÎìù',
        'Ï†ïÍ∏∞Ï†ÅÏù∏ ÌîºÎìúÎ∞± ÏÑ∏ÏÖòÏúºÎ°ú ÏßÄÏÜçÏ†Å ÏÑ±Ïû•'
      ]
    }
    return c.json({ success: true, insights: demoInsights, demo: true })
  }
  
  // Ïã§Ï†ú AI Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±
  const prompt = `ÎãπÏã†ÏùÄ Ï°∞ÏßÅ Ïó≠Îüâ ÏßÑÎã® Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. Îã§Ïùå ÏßÑÎã® Í≤∞Í≥ºÎ•º Î∂ÑÏÑùÌïòÍ≥† Ïù∏ÏÇ¨Ïù¥Ìä∏Î•º Ï†úÍ≥µÌï¥Ï£ºÏÑ∏Ïöî.

ÏùëÎãµÏûê: ${body.respondent.name} (${body.respondent.position})
Ï†ÑÏ≤¥ ÌèâÍ∑†: ${body.summary.overallAverage}Ï†ê
Í∞ïÏ†ê Ïó≠Îüâ: ${body.summary.strengths.join(', ')}
Í∞úÏÑ† ÏòÅÏó≠: ${body.summary.improvements.join(', ')}

Ïó≠ÎüâÎ≥Ñ ÏÉÅÏÑ∏:
${body.analysis.map((a: any) => `- ${a.competency}: ${a.average}Ï†ê (${a.count}Í∞ú Î¨∏Ìï≠)`).join('\n')}

Îã§Ïùå Ìï≠Î™©Ïóê ÎåÄÌï¥ Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Ïã§Ïö©Ï†ÅÏù∏ Ïù∏ÏÇ¨Ïù¥Ìä∏Î•º Ï†úÍ≥µÌï¥Ï£ºÏÑ∏Ïöî:
1. overall: Ï†ÑÎ∞òÏ†ÅÏù∏ Ïó≠Îüâ ÏàòÏ§Ä ÌèâÍ∞Ä
2. strengths: Í∞ïÏ†ê Ïó≠Îüâ Î∂ÑÏÑù Î∞è ÌôúÏö© Î∞©Ïïà
3. improvements: Í∞úÏÑ† ÏòÅÏó≠ Î∂ÑÏÑù Î∞è Î∞úÏ†Ñ Î∞©Ìñ•
4. recommendations: Íµ¨Ï≤¥Ï†ÅÏù∏ Ïã§Ìñâ Í∞ÄÎä•Ìïú Ï∂îÏ≤úÏÇ¨Ìï≠ (Î∞∞Ïó¥)

JSON ÌòïÏãùÏúºÎ°ú ÏùëÎãµÌï¥Ï£ºÏÑ∏Ïöî.`

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: 'ÎãπÏã†ÏùÄ Ï°∞ÏßÅ Ïó≠Îüâ ÏßÑÎã® Î∞è Ïù∏Ïû¨Í∞úÎ∞ú Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        response_format: { type: 'json_object' }
      })
    })
    
    if (!response.ok) {
      throw new Error('OpenAI API Ïò§Î•ò')
    }
    
    const data = await response.json() as any
    const insights = JSON.parse(data.choices[0].message.content)
    
    return c.json({ success: true, insights, demo: false })
  } catch (error: any) {
    return c.json({ success: false, error: error.message }, 500)
  }
})

// AI ÏΩîÏπ≠ API
app.post('/api/ai/coaching', async (c) => {
  const apiKey = c.env.OPENAI_API_KEY
  const body = await c.req.json()
  
  // Îç∞Î™® Î™®Îìú: API ÌÇ§Í∞Ä ÏóÜÏúºÎ©¥ ÏÉòÌîå ÏùëÎãµ Î∞òÌôò
  if (!apiKey || apiKey === 'your-openai-api-key-here') {
    const lastMessage = body.messages[body.messages.length - 1]
    const demoResponse = `ÏïàÎÖïÌïòÏÑ∏Ïöî! AI Ïó≠Îüâ Í∞úÎ∞ú ÏΩîÏπòÏûÖÎãàÎã§. 

"${lastMessage.content}" Ïóê ÎåÄÌï¥ ÎßêÏîÄÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.

Ïó≠Îüâ Í∞úÎ∞úÏùÄ ÏßÄÏÜçÏ†ÅÏù∏ Í≥ºÏ†ïÏûÖÎãàÎã§. Îã§ÏùåÍ≥º Í∞ôÏùÄ Î∞©Î≤ïÏùÑ Ï∂îÏ≤úÎìúÎ¶ΩÎãàÎã§:

1. **ÏûêÍ∏∞ ÌèâÍ∞Ä**: ÌòÑÏû¨ ÏàòÏ§ÄÏùÑ Í∞ùÍ¥ÄÏ†ÅÏúºÎ°ú ÌååÏïÖÌïòÏÑ∏Ïöî
2. **Î™©Ìëú ÏÑ§Ï†ï**: SMART Î™©ÌëúÎ•º ÏÑ§Ï†ïÌïòÏÑ∏Ïöî (Íµ¨Ï≤¥Ï†Å, Ï∏°Ï†ïÍ∞ÄÎä•, Îã¨ÏÑ±Í∞ÄÎä•, Í¥ÄÎ†®ÏûàÎäî, ÏãúÌïúÏûàÎäî)
3. **Ïã§Ï≤ú Í≥ÑÌöç**: ÏûëÏùÄ Îã®Í≥ÑÎ∂ÄÌÑ∞ ÏãúÏûëÌïòÏó¨ Íæ∏Ï§ÄÌûà Ïã§ÌñâÌïòÏÑ∏Ïöî
4. **ÌîºÎìúÎ∞±**: ÎèôÎ£åÎÇò ÏÉÅÏÇ¨Î°úÎ∂ÄÌÑ∞ Ï†ïÍ∏∞Ï†ÅÏù∏ ÌîºÎìúÎ∞±ÏùÑ Î∞õÏúºÏÑ∏Ïöî
5. **ÌïôÏäµ**: Í¥ÄÎ†® ÎèÑÏÑú, Í∞ïÏùò, Î©òÌÜ†ÎßÅÏùÑ ÌôúÏö©ÌïòÏÑ∏Ïöî

Ï∂îÍ∞ÄÎ°ú Í∂ÅÍ∏àÌïòÏã† Ï†êÏù¥ ÏûàÏúºÏãúÎ©¥ Ïñ∏Ï†úÎì† ÏßàÎ¨∏Ìï¥Ï£ºÏÑ∏Ïöî!

‚öôÔ∏è Îç∞Î™® Î™®Îìú: Ïã§Ï†ú AI ÏΩîÏπ≠ÏùÑ ÏõêÌïòÏãúÎ©¥ .dev.vars ÌååÏùºÏóê OpenAI API ÌÇ§Î•º ÏÑ§Ï†ïÌïòÏÑ∏Ïöî.`
    
    return c.json({ 
      success: true, 
      message: demoResponse,
      demo: true
    })
  }
  
  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: body.messages,
        temperature: 0.7
      })
    })
    
    if (!response.ok) {
      const error = await response.text()
      return c.json({ success: false, error: `OpenAI API Ïò§Î•ò: ${error}` }, 500)
    }
    
    const data = await response.json() as any
    
    return c.json({ 
      success: true, 
      message: data.choices[0].message.content 
    })
  } catch (error: any) {
    return c.json({ success: false, error: error.message }, 500)
  }
})

// ============================================================================
// Frontend Routes
// ============================================================================

app.get('/', (c) => {
  return c.html(`
    <!DOCTYPE html>
    <html lang="ko">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>AI Ïó≠Îüâ ÏßÑÎã® ÌîåÎû´Ìèº</title>
        <script src="https://cdn.tailwindcss.com"></script>
        <link href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css" rel="stylesheet">
        <link href="/static/style.css?v=2" rel="stylesheet">
    </head>
    <body class="bg-gray-50">
        <!-- Navigation -->
        <nav class="bg-white shadow-sm">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between h-16">
                    <div class="flex items-center">
                        <i class="fas fa-brain text-blue-600 text-2xl mr-3"></i>
                        <h1 class="text-xl font-bold text-gray-800">AI Ïó≠Îüâ ÏßÑÎã® ÌîåÎû´Ìèº</h1>
                    </div>
                    <div class="flex items-center space-x-4">
                        <button onclick="showTab('assess')" class="nav-btn px-4 py-2 rounded-lg hover:bg-blue-50">
                            <i class="fas fa-clipboard-list mr-2"></i>ÏßÑÎã® ÏÑ§Í≥Ñ
                        </button>
                        <button onclick="showTab('execute')" class="nav-btn px-4 py-2 rounded-lg hover:bg-blue-50">
                            <i class="fas fa-pen-to-square mr-2"></i>ÏßÑÎã® Ïã§Ìñâ
                        </button>
                        <button onclick="showTab('analytics')" class="nav-btn px-4 py-2 rounded-lg hover:bg-blue-50">
                            <i class="fas fa-chart-bar mr-2"></i>Î∂ÑÏÑù
                        </button>
                        <button onclick="showTab('action')" class="nav-btn px-4 py-2 rounded-lg hover:bg-blue-50">
                            <i class="fas fa-rocket mr-2"></i>Ïã§Ìñâ ÏßÄÏõê
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- ASSESS Tab -->
            <div id="tab-assess" class="tab-content">
                <div class="bg-white rounded-lg shadow p-6 mb-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">
                        <i class="fas fa-clipboard-list text-blue-600 mr-2"></i>
                        Phase 1: ÏßÑÎã® ÏÑ§Í≥Ñ Î∞è Ïã§Ìñâ
                    </h2>
                    
                    <!-- Ïó≠Îüâ ÌÇ§ÏõåÎìú Í≤ÄÏÉâ -->
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Ïó≠Îüâ ÌÇ§ÏõåÎìú Í≤ÄÏÉâ Î∞è ÏÑ†ÌÉù
                        </label>
                        <div class="flex gap-2">
                            <input 
                                type="text" 
                                id="competency-search" 
                                placeholder="Ïòà: Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò, Î¶¨ÎçîÏã≠, Ï†ÑÎûµÏ†ÅÏÇ¨Í≥†"
                                class="flex-1 rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                            >
                            <button onclick="searchCompetencies()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                                <i class="fas fa-search mr-2"></i>Í≤ÄÏÉâ
                            </button>
                        </div>
                    </div>

                    <!-- Í≤ÄÏÉâ Í≤∞Í≥º Î∞è ÏÑ†ÌÉùÎêú Ïó≠Îüâ -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                        <div>
                            <h3 class="text-sm font-medium text-gray-700 mb-2">Í≤ÄÏÉâ Í≤∞Í≥º</h3>
                            <div id="search-results" class="border rounded-lg p-4 min-h-[200px] max-h-[300px] overflow-y-auto">
                                <p class="text-gray-400 text-sm">Ïó≠ÎüâÏùÑ Í≤ÄÏÉâÌïòÏÑ∏Ïöî</p>
                            </div>
                        </div>
                        <div>
                            <h3 class="text-sm font-medium text-gray-700 mb-2">ÏÑ†ÌÉùÎêú Ïó≠Îüâ</h3>
                            <div id="selected-competencies" class="border rounded-lg p-4 min-h-[200px] max-h-[300px] overflow-y-auto">
                                <p class="text-gray-400 text-sm">Ïó≠ÎüâÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</p>
                            </div>
                        </div>
                    </div>

                    <!-- AI Î¨∏Ìï≠ ÏÉùÏÑ± ÏòµÏÖò -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">ÎåÄÏÉÅ ÏßÅÍ∏â</label>
                            <select id="target-level" class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                <option value="all">Ï†ÑÏ≤¥</option>
                                <option value="junior">ÏÇ¨Ïõê/ÎåÄÎ¶¨</option>
                                <option value="senior">Í≥ºÏû•/Ï∞®Ïû•</option>
                                <option value="manager">ÌåÄÏû• Ïù¥ÏÉÅ</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">ÏßÑÎã® Ïú†Ìòï</label>
                            <select id="question-type" class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                <option value="self">ÏûêÍ∞ÄÏßÑÎã®</option>
                                <option value="multi">Îã§Î©¥ÌèâÍ∞Ä</option>
                                <option value="survey">ÏÑ§Î¨∏Ï°∞ÏÇ¨</option>
                            </select>
                        </div>
                        <div class="flex items-end">
                            <button onclick="generateQuestions()" class="w-full px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700">
                                <i class="fas fa-magic mr-2"></i>AI Î¨∏Ìï≠ ÏÉùÏÑ±
                            </button>
                        </div>
                    </div>

                    <!-- ÏÉùÏÑ± Í≤∞Í≥º -->
                    <div id="generation-result" class="hidden">
                        <h3 class="text-lg font-semibold text-gray-800 mb-4">ÏÉùÏÑ±Îêú ÏßÑÎã® Î¨∏Ìï≠</h3>
                        <div id="generation-content" class="bg-gray-50 rounded-lg p-4"></div>
                    </div>
                </div>
            </div>

            <!-- EXECUTE Tab (ÏßÑÎã® Ïã§Ìñâ) -->
            <div id="tab-execute" class="tab-content hidden">
                <div class="bg-white rounded-lg shadow p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">
                        <i class="fas fa-pen-to-square text-purple-600 mr-2"></i>
                        ÏßÑÎã® Ïã§Ìñâ
                    </h2>
                    
                    <!-- Step 1: ÏùëÎãµÏûê Í∏∞Î≥∏ Ï†ïÎ≥¥ -->
                    <div id="respondent-info-section" class="mb-8">
                        <h3 class="text-lg font-semibold text-gray-800 mb-4">
                            <span class="bg-blue-600 text-white rounded-full w-6 h-6 inline-flex items-center justify-center mr-2 text-sm">1</span>
                            ÏùëÎãµÏûê Ï†ïÎ≥¥ ÏûÖÎ†•
                        </h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Ïù¥Î¶Ñ *</label>
                                <input 
                                    type="text" 
                                    id="exec-name" 
                                    placeholder="ÌôçÍ∏∏Îèô"
                                    class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    required
                                >
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Ïù¥Î©îÏùº *</label>
                                <input 
                                    type="email" 
                                    id="exec-email" 
                                    placeholder="hong@example.com"
                                    class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                    required
                                >
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Î∂ÄÏÑú</label>
                                <input 
                                    type="text" 
                                    id="exec-department" 
                                    placeholder="Ï†ÑÎûµÍ∏∞ÌöçÌåÄ"
                                    class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                >
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">ÏßÅÏúÑ</label>
                                <input 
                                    type="text" 
                                    id="exec-position" 
                                    placeholder="Í≥ºÏû•"
                                    class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                >
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">ÏßÅÍ∏â</label>
                                <select id="exec-level" class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                    <option value="junior">ÏÇ¨Ïõê/ÎåÄÎ¶¨</option>
                                    <option value="senior">Í≥ºÏû•/Ï∞®Ïû•</option>
                                    <option value="manager">ÌåÄÏû• Ïù¥ÏÉÅ</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Step 2: ÏßÑÎã® Î¨∏Ìï≠ ÎîîÏä§ÌîåÎ†àÏù¥ ÏÑ§Ï†ï -->
                    <div id="display-settings-section" class="mb-8">
                        <h3 class="text-lg font-semibold text-gray-800 mb-4">
                            <span class="bg-blue-600 text-white rounded-full w-6 h-6 inline-flex items-center justify-center mr-2 text-sm">2</span>
                            ÏßÑÎã® Î¨∏Ìï≠ ÎîîÏä§ÌîåÎ†àÏù¥ ÏÑ§Ï†ï
                        </h3>
                        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                            <div class="flex items-start">
                                <i class="fas fa-info-circle text-blue-600 mt-1 mr-3"></i>
                                <div>
                                    <p class="text-sm text-blue-800 mb-2">
                                        <strong>Ìïú ÌôîÎ©¥Ïóê ÌëúÏãúÌï† Î¨∏Ìï≠ ÏàòÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</strong>
                                    </p>
                                    <ul class="text-xs text-blue-700 space-y-1">
                                        <li>‚Ä¢ <strong>1Í∞úÏî©</strong>: ÏßëÏ§ëÎ†• Ìñ•ÏÉÅ, Ìïú Î¨∏Ìï≠Ïî© Ïã†Ï§ëÌïòÍ≤å ÏùëÎãµ</li>
                                        <li>‚Ä¢ <strong>5Í∞úÏî©</strong>: Ï†ÅÏ†àÌïú ÏÜçÎèÑÍ∞ê, Ïó≠ÎüâÎ≥Ñ Í∑∏Î£π Îã®ÏúÑ ÏùëÎãµ</li>
                                        <li>‚Ä¢ <strong>10Í∞úÏî©</strong>: Îπ†Î•∏ ÏßÑÌñâ, Ïó¨Îü¨ Î¨∏Ìï≠ ÎπÑÍµêÌïòÎ©∞ ÏùëÎãµ</li>
                                        <li>‚Ä¢ <strong>Ï†ÑÏ≤¥</strong>: Î™®Îì† Î¨∏Ìï≠ÏùÑ ÌïúÎààÏóê Î≥¥Í≥† ÏùëÎãµ</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
                            <button onclick="setQuestionDisplay(1)" class="display-btn px-4 py-3 border-2 border-gray-300 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all">
                                <div class="text-center">
                                    <div class="text-2xl font-bold text-gray-700">1Í∞úÏî©</div>
                                    <div class="text-xs text-gray-500 mt-1">ÏßëÏ§ë Î™®Îìú</div>
                                </div>
                            </button>
                            <button onclick="setQuestionDisplay(5)" class="display-btn px-4 py-3 border-2 border-gray-300 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all">
                                <div class="text-center">
                                    <div class="text-2xl font-bold text-gray-700">5Í∞úÏî©</div>
                                    <div class="text-xs text-gray-500 mt-1">ÌëúÏ§Ä Î™®Îìú</div>
                                </div>
                            </button>
                            <button onclick="setQuestionDisplay(10)" class="display-btn px-4 py-3 border-2 border-gray-300 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all">
                                <div class="text-center">
                                    <div class="text-2xl font-bold text-gray-700">10Í∞úÏî©</div>
                                    <div class="text-xs text-gray-500 mt-1">Îπ†Î•∏ Î™®Îìú</div>
                                </div>
                            </button>
                            <button onclick="setQuestionDisplay(-1)" class="display-btn px-4 py-3 border-2 border-gray-300 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all">
                                <div class="text-center">
                                    <div class="text-2xl font-bold text-gray-700">Ï†ÑÏ≤¥</div>
                                    <div class="text-xs text-gray-500 mt-1">Ï†ÑÏ≤¥ Î≥¥Í∏∞</div>
                                </div>
                            </button>
                        </div>
                        
                        <div id="selected-display" class="mt-4 text-center text-sm text-gray-600">
                            ÏÑ†ÌÉùÎêú ÎîîÏä§ÌîåÎ†àÏù¥: <span class="font-semibold text-blue-600">ÎØ∏ÏÑ†ÌÉù</span>
                        </div>
                    </div>

                    <!-- Step 3: ÏßÑÎã® ÏãúÏûë Î≤ÑÌäº -->
                    <div class="flex justify-center">
                        <button onclick="startAssessment()" class="px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white text-lg rounded-lg hover:from-blue-700 hover:to-purple-700 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed" disabled id="start-assessment-btn">
                            <i class="fas fa-play mr-2"></i>ÏßÑÎã® ÏãúÏûë
                        </button>
                    </div>

                    <!-- ÏßÑÎã® Î¨∏Ìï≠ ÏòÅÏó≠ (ÎèôÏ†Å ÏÉùÏÑ±) -->
                    <div id="assessment-questions-area" class="mt-8 hidden">
                        <div class="border-t pt-6">
                            <div class="flex justify-between items-center mb-6">
                                <h3 class="text-lg font-semibold text-gray-800">
                                    ÏßÑÎã® Î¨∏Ìï≠
                                </h3>
                                <div class="text-sm text-gray-600">
                                    <span id="current-progress">0</span> / <span id="total-questions">0</span> Î¨∏Ìï≠
                                </div>
                            </div>
                            
                            <!-- Î¨∏Ìï≠ Ïª®ÌÖåÏù¥ÎÑà -->
                            <div id="questions-container" class="space-y-6">
                                <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
                            </div>

                            <!-- ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î≤ÑÌäº -->
                            <div class="flex justify-between mt-8">
                                <button onclick="previousPage()" id="prev-btn" class="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                                    <i class="fas fa-chevron-left mr-2"></i>Ïù¥Ï†Ñ
                                </button>
                                <button onclick="nextPage()" id="next-btn" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed">
                                    Îã§Ïùå<i class="fas fa-chevron-right ml-2"></i>
                                </button>
                                <button onclick="submitAssessment()" id="submit-btn" class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 hidden">
                                    <i class="fas fa-check mr-2"></i>Ï†úÏ∂úÌïòÍ∏∞
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- ANALYTICS Tab -->
            <div id="tab-analytics" class="tab-content hidden">
                <div class="bg-white rounded-lg shadow p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">
                        <i class="fas fa-chart-bar text-green-600 mr-2"></i>
                        Phase 2: Î∂ÑÏÑù Î∞è Ïù∏ÏÇ¨Ïù¥Ìä∏
                    </h2>
                    
                    <!-- ÏùëÎãµÏûê Î™©Î°ù -->
                    <div class="mb-6">
                        <h3 class="text-lg font-semibold text-gray-800 mb-3">ÏùëÎãµÏûê Î™©Î°ù</h3>
                        <div id="respondents-list" class="space-y-2">
                            <p class="text-gray-400 text-sm">Î°úÎî© Ï§ë...</p>
                        </div>
                    </div>
                    
                    <!-- Í≤∞Í≥º Î¶¨Ìè¨Ìä∏ ÏòÅÏó≠ -->
                    <div id="analysis-report" class="hidden"></div>
                </div>
            </div>

            <!-- ACTION Tab -->
            <div id="tab-action" class="tab-content hidden">
                <div class="bg-white rounded-lg shadow p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">
                        <i class="fas fa-rocket text-orange-600 mr-2"></i>
                        Phase 3: AI Ïã§Ìñâ ÏßÄÏõê
                    </h2>
                    
                    <!-- AI ÏΩîÏπ≠ Ï±óÎ¥á -->
                    <div class="mb-6">
                        <h3 class="text-lg font-semibold text-gray-800 mb-3">
                            <i class="fas fa-comments text-blue-600 mr-2"></i>AI ÏΩîÏπ≠
                        </h3>
                        <div id="chat-container" class="border rounded-lg p-4 mb-4 h-[400px] overflow-y-auto bg-gray-50">
                            <div class="text-gray-500 text-sm text-center py-8">
                                Ïó≠Îüâ ÏßÑÎã® Í≤∞Í≥ºÏóê ÎåÄÌï¥ AI ÏΩîÏπòÏôÄ ÎåÄÌôîÎ•º ÏãúÏûëÌïòÏÑ∏Ïöî
                            </div>
                        </div>
                        <div class="flex gap-2">
                            <input 
                                type="text" 
                                id="chat-input" 
                                placeholder="ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                                class="flex-1 rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                                onkeypress="if(event.key === 'Enter') sendChatMessage()"
                            >
                            <button onclick="sendChatMessage()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <script src="https://cdn.jsdelivr.net/npm/axios@1.6.0/dist/axios.min.js"></script>
        <script src="/static/app.js?v=2"></script>
    </body>
    </html>
  `)
})

export default app
