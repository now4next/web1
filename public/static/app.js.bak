// ============================================================================
// 전역 상태 관리
// ============================================================================

let selectedCompetencies = []
let chatMessages = []
let generatedData = null // AI 생성된 데이터 저장
let editableQuestions = [] // 편집 가능한 문항 목록
let currentSessionId = null // 현재 진단 세션 ID

// ============================================================================
// 탭 전환
// ============================================================================

function showTab(tabName) {
  // 모든 탭 숨기기
  document.querySelectorAll('.tab-content').forEach(tab => {
    tab.classList.add('hidden')
  })
  
  // 선택된 탭 표시
  document.getElementById(`tab-${tabName}`).classList.remove('hidden')
  
  // 네비게이션 버튼 스타일 업데이트
  document.querySelectorAll('.nav-btn').forEach(btn => {
    btn.classList.remove('bg-blue-100', 'text-blue-700')
  })
  event.target.closest('button').classList.add('bg-blue-100', 'text-blue-700')
}

// ============================================================================
// Phase 1: 진단 설계
// ============================================================================

// 역량 검색
async function searchCompetencies() {
  const query = document.getElementById('competency-search').value
  const resultsDiv = document.getElementById('search-results')
  
  if (!query.trim()) {
    resultsDiv.innerHTML = '<p class="text-gray-400 text-sm">역량을 검색하세요</p>'
    return
  }
  
  try {
    resultsDiv.innerHTML = '<p class="text-gray-400 text-sm">검색 중...</p>'
    
    const response = await axios.get(`/api/competencies/search?q=${encodeURIComponent(query)}`)
    
    if (response.data.success && response.data.data.length > 0) {
      resultsDiv.innerHTML = response.data.data.map(comp => `
        <div class="flex items-center justify-between py-2 px-3 hover:bg-gray-50 rounded cursor-pointer mb-2 border" 
             onclick="selectCompetency(${comp.id}, '${comp.keyword}', '${comp.description}')">
          <div>
            <div class="font-medium text-gray-800">${comp.keyword}</div>
            <div class="text-xs text-gray-500">${comp.model_name} · ${comp.description}</div>
          </div>
          <button class="text-blue-600 hover:text-blue-700">
            <i class="fas fa-plus-circle"></i>
          </button>
        </div>
      `).join('')
    } else {
      resultsDiv.innerHTML = '<p class="text-gray-400 text-sm">검색 결과가 없습니다</p>'
    }
  } catch (error) {
    console.error('Error searching competencies:', error)
    resultsDiv.innerHTML = '<p class="text-red-500 text-sm">검색 중 오류가 발생했습니다</p>'
  }
}

// 역량 선택
function selectCompetency(id, keyword, description) {
  // 중복 체크
  if (selectedCompetencies.find(c => c.id === id)) {
    alert('이미 선택된 역량입니다')
    return
  }
  
  selectedCompetencies.push({ id, keyword, description })
  updateSelectedCompetencies()
}

// 선택된 역량 제거
function removeCompetency(id) {
  selectedCompetencies = selectedCompetencies.filter(c => c.id !== id)
  updateSelectedCompetencies()
}

// 선택된 역량 UI 업데이트
function updateSelectedCompetencies() {
  const selectedDiv = document.getElementById('selected-competencies')
  
  if (selectedCompetencies.length === 0) {
    selectedDiv.innerHTML = '<p class="text-gray-400 text-sm">역량을 선택하세요</p>'
    return
  }
  
  selectedDiv.innerHTML = selectedCompetencies.map(comp => `
    <div class="flex items-center justify-between py-2 px-3 bg-blue-50 rounded mb-2 border border-blue-200">
      <div>
        <div class="font-medium text-gray-800">${comp.keyword}</div>
        <div class="text-xs text-gray-600">${comp.description}</div>
      </div>
      <button onclick="removeCompetency(${comp.id})" class="text-red-600 hover:text-red-700">
        <i class="fas fa-times-circle"></i>
      </button>
    </div>
  `).join('')
}

// AI 문항 생성
async function generateQuestions() {
  if (selectedCompetencies.length === 0) {
    alert('역량을 먼저 선택해주세요')
    return
  }
  
  const targetLevel = document.getElementById('target-level').value
  const questionType = document.getElementById('question-type').value
  
  const resultDiv = document.getElementById('generation-result')
  const contentDiv = document.getElementById('generation-content')
  
  try {
    resultDiv.classList.remove('hidden')
    contentDiv.innerHTML = `
      <div class="text-center py-8">
        <i class="fas fa-spinner fa-spin text-4xl text-blue-600 mb-4"></i>
        <p class="text-gray-600">AI가 진단 문항을 생성하고 있습니다...</p>
      </div>
    `
    
    const response = await axios.post('/api/ai/generate-questions', {
      competency_keywords: selectedCompetencies.map(c => c.keyword),
      target_level: targetLevel,
      question_type: questionType
    }, {
      timeout: 60000 // 60초 타임아웃
    })
    
    if (response.data.success) {
      const data = response.data.data
      const isDemo = response.data.demo
      
      // 생성된 데이터 저장
      generatedData = data
      editableQuestions = data.questions.map((q, idx) => ({
        id: idx,
        ...q
      }))
      
      renderGeneratedQuestions(data, isDemo)
    } else {
        ${isDemo ? `
        <!-- 데모 모드 알림 -->
        <div class="bg-yellow-50 border-l-4 border-yellow-500 p-4 mb-4">
          <div class="flex items-center">
            <i class="fas fa-exclamation-triangle text-yellow-600 mr-2"></i>
            <div>
              <h4 class="font-semibold text-yellow-900 mb-1">데모 모드로 실행 중</h4>
              <p class="text-yellow-800 text-sm">
                OpenAI API 키가 설정되지 않아 샘플 데이터를 표시합니다. 
                실제 AI 생성을 원하시면 <code class="bg-yellow-100 px-1 rounded">.dev.vars</code> 파일에 API 키를 설정하세요.
              </p>
            </div>
          </div>
        </div>
        ` : ''}
        
        <!-- 진단 안내문 -->
        <div class="bg-blue-50 border-l-4 border-blue-500 p-4 mb-6">
          <h4 class="font-semibold text-blue-900 mb-2">
            <i class="fas fa-info-circle mr-2"></i>진단 안내
          </h4>
          <p class="text-blue-800 text-sm whitespace-pre-line">${data.guide}</p>
        </div>
        
        <!-- 행동 지표 -->
        <div class="mb-6">
          <h4 class="font-semibold text-gray-800 mb-3">
            <i class="fas fa-list-check mr-2 text-green-600"></i>행동 지표 (Behavioral Indicators)
          </h4>
          ${data.behavioral_indicators.map(bi => `
            <div class="mb-4 p-4 bg-white border rounded-lg">
              <div class="font-medium text-gray-800 mb-2">${bi.competency}</div>
              <ul class="list-disc list-inside space-y-1">
                ${bi.indicators.map(ind => `
                  <li class="text-gray-600 text-sm">${ind}</li>
                `).join('')}
              </ul>
            </div>
          `).join('')}
        </div>
        
        <!-- 진단 문항 -->
        <div>
          <h4 class="font-semibold text-gray-800 mb-3">
            <i class="fas fa-clipboard-question mr-2 text-purple-600"></i>진단 문항
          </h4>
          ${data.questions.map((q, idx) => `
            <div class="mb-3 p-4 bg-white border rounded-lg">
              <div class="flex items-start gap-3">
                <span class="text-sm font-medium text-gray-500 mt-1">Q${idx + 1}</span>
                <div class="flex-1">
                  <div class="text-gray-700">${q.question_text}</div>
                  <div class="text-xs text-gray-500 mt-1">역량: ${q.competency}</div>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
        
        <div class="mt-6 flex gap-3">
          <button onclick="saveAssessment()" class="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
            <i class="fas fa-save mr-2"></i>진단 저장
          </button>
          <button onclick="startAssessment()" class="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
            <i class="fas fa-play mr-2"></i>진단 시작
          </button>
        </div>
      `
    } else {
      contentDiv.innerHTML = `
        <div class="text-center py-8">
          <i class="fas fa-exclamation-triangle text-4xl text-red-500 mb-4"></i>
          <p class="text-red-600">${response.data.error}</p>
          <p class="text-gray-500 text-sm mt-2">OpenAI API 키를 .dev.vars 파일에 설정해주세요</p>
        </div>
      `
    }
  } catch (error) {
    console.error('Error generating questions:', error)
    const errorDetail = error.response?.data?.error || error.message || '알 수 없는 오류'
    contentDiv.innerHTML = `
      <div class="text-center py-8">
        <i class="fas fa-exclamation-triangle text-4xl text-red-500 mb-4"></i>
        <p class="text-red-600">문항 생성 중 오류가 발생했습니다</p>
        <p class="text-gray-500 text-sm mt-2">${errorDetail}</p>
        <button onclick="generateQuestions()" class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          <i class="fas fa-redo mr-2"></i>다시 시도
        </button>
      </div>
    `
  }
}

// 생성된 문항 렌더링 (편집 가능)
function renderGeneratedQuestions(data, isDemo) {
  const contentDiv = document.getElementById('generation-content')
  
  contentDiv.innerHTML = `
    ${isDemo ? `
    <!-- 데모 모드 알림 -->
    <div class="bg-yellow-50 border-l-4 border-yellow-500 p-4 mb-4">
      <div class="flex items-center">
        <i class="fas fa-exclamation-triangle text-yellow-600 mr-2"></i>
        <div>
          <h4 class="font-semibold text-yellow-900 mb-1">데모 모드로 실행 중</h4>
          <p class="text-yellow-800 text-sm">
            OpenAI API 키가 설정되지 않아 샘플 데이터를 표시합니다. 
            실제 AI 생성을 원하시면 <code class="bg-yellow-100 px-1 rounded">.dev.vars</code> 파일에 API 키를 설정하세요.
          </p>
        </div>
      </div>
    </div>
    ` : ''}
    
    <!-- 진단 안내문 -->
    <div class="bg-blue-50 border-l-4 border-blue-500 p-4 mb-6">
      <h4 class="font-semibold text-blue-900 mb-2">
        <i class="fas fa-info-circle mr-2"></i>진단 안내
      </h4>
      <p class="text-blue-800 text-sm whitespace-pre-line">${data.guide}</p>
    </div>
    
    <!-- 행동 지표 -->
    <div class="mb-6">
      <h4 class="font-semibold text-gray-800 mb-3">
        <i class="fas fa-list-check mr-2 text-green-600"></i>행동 지표 (Behavioral Indicators)
      </h4>
      ${data.behavioral_indicators.map(bi => `
        <div class="mb-4 p-4 bg-white border rounded-lg">
          <div class="font-medium text-gray-800 mb-2">${bi.competency}</div>
          <ul class="list-disc list-inside space-y-1">
            ${bi.indicators.map(ind => `
              <li class="text-gray-600 text-sm">${ind}</li>
            `).join('')}
          </ul>
        </div>
      `).join('')}
    </div>
    
    <!-- 진단 문항 (편집 가능) -->
    <div>
      <div class="flex justify-between items-center mb-3">
        <h4 class="font-semibold text-gray-800">
          <i class="fas fa-clipboard-question mr-2 text-purple-600"></i>진단 문항
        </h4>
        <button onclick="toggleEditMode()" id="edit-mode-btn" class="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg">
          <i class="fas fa-edit mr-1"></i>편집 모드
        </button>
      </div>
      <div id="questions-container"></div>
    </div>
    
    <div class="mt-6 flex gap-3">
      <button onclick="showSaveDialog()" class="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
        <i class="fas fa-save mr-2"></i>진단 저장
      </button>
      <button onclick="showScaleSetup()" class="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
        <i class="fas fa-play mr-2"></i>진단 시작
      </button>
    </div>
  `
  
  renderQuestions()
}

// 문항 목록 렌더링
function renderQuestions() {
  const container = document.getElementById('questions-container')
  if (!container) return
  
  const isEditMode = document.getElementById('edit-mode-btn')?.textContent.includes('보기 모드')
  
  container.innerHTML = editableQuestions.map((q, idx) => `
    <div class="mb-3 p-4 bg-white border rounded-lg question-item" data-id="${q.id}">
      <div class="flex items-start gap-3">
        ${isEditMode ? `
        <div class="flex flex-col gap-2">
          <button onclick="moveQuestion(${idx}, -1)" class="text-gray-400 hover:text-gray-600" ${idx === 0 ? 'disabled' : ''}>
            <i class="fas fa-arrow-up"></i>
          </button>
          <button onclick="moveQuestion(${idx}, 1)" class="text-gray-400 hover:text-gray-600" ${idx === editableQuestions.length - 1 ? 'disabled' : ''}>
            <i class="fas fa-arrow-down"></i>
          </button>
        </div>
        ` : ''}
        <span class="text-sm font-medium text-gray-500 mt-1">Q${idx + 1}</span>
        <div class="flex-1">
          ${isEditMode ? `
          <textarea 
            class="w-full p-2 border rounded text-gray-700 mb-2" 
            rows="2"
            onchange="updateQuestion(${idx}, this.value)"
          >${q.question_text}</textarea>
          ` : `
          <div class="text-gray-700">${q.question_text}</div>
          `}
          <div class="text-xs text-gray-500 mt-1">역량: ${q.competency}</div>
        </div>
        ${isEditMode ? `
        <button onclick="deleteQuestion(${idx})" class="text-red-500 hover:text-red-700">
          <i class="fas fa-trash"></i>
        </button>
        ` : ''}
      </div>
    </div>
  `).join('')
}

// 편집 모드 토글
function toggleEditMode() {
  const btn = document.getElementById('edit-mode-btn')
  if (btn.textContent.includes('편집 모드')) {
    btn.innerHTML = '<i class="fas fa-eye mr-1"></i>보기 모드'
    btn.classList.remove('bg-gray-100', 'hover:bg-gray-200')
    btn.classList.add('bg-blue-100', 'hover:bg-blue-200', 'text-blue-700')
  } else {
    btn.innerHTML = '<i class="fas fa-edit mr-1"></i>편집 모드'
    btn.classList.remove('bg-blue-100', 'hover:bg-blue-200', 'text-blue-700')
    btn.classList.add('bg-gray-100', 'hover:bg-gray-200')
  }
  renderQuestions()
}

// 문항 수정
function updateQuestion(idx, newText) {
  editableQuestions[idx].question_text = newText
}

// 문항 삭제
function deleteQuestion(idx) {
  if (confirm('이 문항을 삭제하시겠습니까?')) {
    editableQuestions.splice(idx, 1)
    renderQuestions()
  }
}

// 문항 순서 변경
function moveQuestion(idx, direction) {
  const newIdx = idx + direction
  if (newIdx < 0 || newIdx >= editableQuestions.length) return
  
  const temp = editableQuestions[idx]
  editableQuestions[idx] = editableQuestions[newIdx]
  editableQuestions[newIdx] = temp
  
  renderQuestions()
}

// 진단 저장 대화상자
async function showSaveDialog() {
  const sessionName = prompt('진단 세션 이름을 입력하세요:', `${selectedCompetencies.map(c => c.keyword).join(', ')} 진단`)
  if (!sessionName) return
  
  try {
    const targetLevel = document.getElementById('target-level').value
    const questionType = document.getElementById('question-type').value
    
    // 진단 세션 생성
    const sessionResponse = await axios.post('/api/assessment-sessions', {
      session_name: sessionName,
      session_type: questionType,
      target_level: targetLevel,
      status: 'draft'
    })
    
    if (!sessionResponse.data.success) {
      alert('진단 세션 생성 실패')
      return
    }
    
    currentSessionId = sessionResponse.data.id
    
    // 문항 저장
    for (const comp of selectedCompetencies) {
      await axios.post('/api/session-competencies', {
        session_id: currentSessionId,
        competency_id: comp.id
      })
    }
    
    for (const q of editableQuestions) {
      await axios.post('/api/assessment-questions-save', {
        session_id: currentSessionId,
        competency_keyword: q.competency,
        question_text: q.question_text,
        question_type: q.question_type
      })
    }
    
    alert('진단이 성공적으로 저장되었습니다!')
  } catch (error) {
    console.error('Error saving assessment:', error)
    alert('진단 저장 중 오류가 발생했습니다: ' + (error.response?.data?.error || error.message))
  }
}

// 진단 척도 설정 및 시작
function showScaleSetup() {
  if (!editableQuestions || editableQuestions.length === 0) {
    alert('먼저 진단 문항을 생성하세요')
    return
  }
  
  const contentDiv = document.getElementById('generation-content')
  
  contentDiv.innerHTML = `
    <div class="bg-white rounded-lg p-6">
      <h3 class="text-xl font-bold text-gray-800 mb-4">
        <i class="fas fa-sliders-h mr-2 text-blue-600"></i>진단 응답 척도 설정
      </h3>
      
      <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-2">척도 유형</label>
        <select id="scale-type" class="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          <option value="likert_5">5점 척도 (1: 전혀 그렇지 않다 ~ 5: 매우 그렇다)</option>
          <option value="likert_7">7점 척도 (1: 전혀 그렇지 않다 ~ 7: 매우 그렇다)</option>
          <option value="percent">백분율 (0% ~ 100%)</option>
        </select>
      </div>
      
      <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-2">응답자 정보</label>
        <div class="grid grid-cols-2 gap-4">
          <input type="text" id="respondent-name" placeholder="이름" class="rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          <input type="email" id="respondent-email" placeholder="이메일" class="rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          <input type="text" id="respondent-dept" placeholder="부서" class="rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          <input type="text" id="respondent-position" placeholder="직책" class="rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>
      </div>
      
      <div class="flex gap-3">
        <button onclick="renderGeneratedQuestions(generatedData, false)" class="flex-1 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">
          <i class="fas fa-arrow-left mr-2"></i>뒤로
        </button>
        <button onclick="startAssessmentExecution()" class="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          <i class="fas fa-play mr-2"></i>진단 시작
        </button>
      </div>
    </div>
  `
}

// 진단 실행
function startAssessmentExecution() {
  const scaleType = document.getElementById('scale-type').value
  const name = document.getElementById('respondent-name').value
  const email = document.getElementById('respondent-email').value
  const dept = document.getElementById('respondent-dept').value
  const position = document.getElementById('respondent-position').value
  
  if (!name || !email) {
    alert('이름과 이메일은 필수입니다')
    return
  }
  
  const contentDiv = document.getElementById('generation-content')
  let currentQuestionIndex = 0
  const responses = []
  
  function renderQuestion() {
    if (currentQuestionIndex >= editableQuestions.length) {
      showAssessmentComplete(responses, { name, email, dept, position })
      return
    }
    
    const q = editableQuestions[currentQuestionIndex]
    const progress = ((currentQuestionIndex / editableQuestions.length) * 100).toFixed(0)
    
    let scaleOptions = ''
    if (scaleType === 'likert_5') {
      scaleOptions = `
        <div class="flex justify-between gap-2">
          ${[1,2,3,4,5].map(val => `
            <button onclick="selectResponse(${val})" class="flex-1 py-3 border-2 rounded-lg hover:border-blue-500 hover:bg-blue-50 scale-btn">
              <div class="font-bold text-lg">${val}</div>
              <div class="text-xs text-gray-500">${val === 1 ? '전혀\n그렇지\n않다' : val === 5 ? '매우\n그렇다' : ''}</div>
            </button>
          `).join('')}
        </div>
      `
    } else if (scaleType === 'likert_7') {
      scaleOptions = `
        <div class="flex justify-between gap-2">
          ${[1,2,3,4,5,6,7].map(val => `
            <button onclick="selectResponse(${val})" class="flex-1 py-3 border-2 rounded-lg hover:border-blue-500 hover:bg-blue-50 scale-btn">
              <div class="font-bold text-lg">${val}</div>
            </button>
          `).join('')}
        </div>
      `
    } else {
      scaleOptions = `
        <input type="range" id="percent-slider" min="0" max="100" value="50" class="w-full mb-2" oninput="updatePercentValue(this.value)">
        <div class="text-center mb-4">
          <span id="percent-value" class="text-2xl font-bold text-blue-600">50%</span>
        </div>
        <button onclick="selectResponse(document.getElementById('percent-slider').value)" class="w-full py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          다음
        </button>
      `
    }
    
    contentDiv.innerHTML = `
      <div class="bg-white rounded-lg p-6">
        <!-- 진행 상황 -->
        <div class="mb-6">
          <div class="flex justify-between text-sm text-gray-600 mb-2">
            <span>진행률</span>
            <span>${currentQuestionIndex + 1} / ${editableQuestions.length}</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2">
            <div class="bg-blue-600 h-2 rounded-full transition-all" style="width: ${progress}%"></div>
          </div>
        </div>
        
        <!-- 문항 -->
        <div class="mb-8">
          <div class="text-sm text-gray-500 mb-2">Q${currentQuestionIndex + 1}. ${q.competency}</div>
          <div class="text-lg font-medium text-gray-800 mb-6">${q.question_text}</div>
          
          ${scaleOptions}
        </div>
        
        <!-- 네비게이션 -->
        <div class="flex gap-3">
          ${currentQuestionIndex > 0 ? `
          <button onclick="previousQuestion()" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">
            <i class="fas fa-arrow-left mr-2"></i>이전
          </button>
          ` : ''}
        </div>
      </div>
    `
  }
  
  window.selectResponse = function(value) {
    responses[currentQuestionIndex] = {
      question_id: editableQuestions[currentQuestionIndex].id,
      question_text: editableQuestions[currentQuestionIndex].question_text,
      competency: editableQuestions[currentQuestionIndex].competency,
      response_value: parseInt(value)
    }
    currentQuestionIndex++
    renderQuestion()
  }
  
  window.previousQuestion = function() {
    if (currentQuestionIndex > 0) {
      currentQuestionIndex--
      renderQuestion()
    }
  }
  
  window.updatePercentValue = function(val) {
    document.getElementById('percent-value').textContent = val + '%'
  }
  
  renderQuestion()
}

// 진단 완료
async function showAssessmentComplete(responses, respondent) {
  const contentDiv = document.getElementById('generation-content')
  
  contentDiv.innerHTML = `
    <div class="bg-white rounded-lg p-6 text-center">
      <i class="fas fa-check-circle text-6xl text-green-600 mb-4"></i>
      <h3 class="text-2xl font-bold text-gray-800 mb-2">진단 완료!</h3>
      <p class="text-gray-600 mb-6">모든 문항에 응답하셨습니다.</p>
      
      <div class="bg-gray-50 rounded-lg p-4 mb-6 text-left">
        <h4 class="font-semibold text-gray-800 mb-2">응답 요약</h4>
        <div class="text-sm text-gray-600">
          <p>응답자: ${respondent.name} (${respondent.email})</p>
          <p>총 문항 수: ${responses.length}개</p>
          <p>평균 점수: ${(responses.reduce((sum, r) => sum + r.response_value, 0) / responses.length).toFixed(2)}</p>
        </div>
      </div>
      
      <div class="flex gap-3">
        <button onclick="saveResponses(${JSON.stringify(responses)}, ${JSON.stringify(respondent)})" class="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
          <i class="fas fa-save mr-2"></i>결과 저장
        </button>
        <button onclick="showTab('analytics')" class="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          <i class="fas fa-chart-bar mr-2"></i>분석 보기
        </button>
      </div>
    </div>
  `
}

// 응답 저장
async function saveResponses(responses, respondent) {
  try {
    // 응답자 등록
    const respResponse = await axios.post('/api/respondents', {
      name: respondent.name,
      email: respondent.email,
      department: respondent.dept || '',
      position: respondent.position || '',
      level: document.getElementById('target-level')?.value || 'all'
    })
    
    const respondentId = respResponse.data.id
    
    // 응답 저장
    for (const response of responses) {
      await axios.post('/api/assessment-responses', {
        session_id: currentSessionId || 1,
        respondent_id: respondentId,
        question_text: response.question_text,
        competency: response.competency,
        response_value: response.response_value
      })
    }
    
    alert('응답이 성공적으로 저장되었습니다!')
  } catch (error) {
    console.error('Error saving responses:', error)
    alert('응답 저장 중 오류가 발생했습니다: ' + (error.response?.data?.error || error.message))
  }
}

// ============================================================================
// Phase 3: AI 코칭
// ============================================================================

async function sendChatMessage() {
  const input = document.getElementById('chat-input')
  const message = input.value.trim()
  
  if (!message) return
  
  // 사용자 메시지 추가
  chatMessages.push({ role: 'user', content: message })
  updateChatUI()
  input.value = ''
  
  // AI 응답 요청
  try {
    const response = await axios.post('/api/ai/coaching', {
      messages: [
        { 
          role: 'system', 
          content: '당신은 조직 역량 개발 전문 AI 코치입니다. 임직원의 역량 진단 결과를 바탕으로 강점을 강화하고 약점을 보완할 수 있도록 구체적이고 실용적인 조언을 제공합니다.' 
        },
        ...chatMessages
      ]
    }, {
      timeout: 60000 // 60초 타임아웃
    })
    
    if (response.data.success) {
      chatMessages.push({ role: 'assistant', content: response.data.message })
      updateChatUI()
    } else {
      alert(response.data.error)
    }
  } catch (error) {
    console.error('Error sending chat message:', error)
    const errorDetail = error.response?.data?.error || error.message || '알 수 없는 오류'
    alert(`메시지 전송 중 오류가 발생했습니다: ${errorDetail}`)
  }
}

function updateChatUI() {
  const container = document.getElementById('chat-container')
  
  if (chatMessages.length === 0) {
    container.innerHTML = `
      <div class="text-gray-500 text-sm text-center py-8">
        역량 진단 결과에 대해 AI 코치와 대화를 시작하세요
      </div>
    `
    return
  }
  
  container.innerHTML = chatMessages.map(msg => {
    if (msg.role === 'user') {
      return `
        <div class="flex justify-end mb-4">
          <div class="bg-blue-600 text-white rounded-lg px-4 py-2 max-w-[70%]">
            ${msg.content}
          </div>
        </div>
      `
    } else {
      return `
        <div class="flex justify-start mb-4">
          <div class="bg-gray-200 text-gray-800 rounded-lg px-4 py-2 max-w-[70%]">
            <div class="flex items-center gap-2 mb-1">
              <i class="fas fa-robot text-blue-600"></i>
              <span class="font-medium text-sm">AI 코치</span>
            </div>
            <div class="whitespace-pre-line">${msg.content}</div>
          </div>
        </div>
      `
    }
  }).join('')
  
  // 스크롤을 최하단으로
  container.scrollTop = container.scrollHeight
}

// ============================================================================
// 초기화
// ============================================================================

document.addEventListener('DOMContentLoaded', () => {
  // 기본 탭 활성화
  showTab('assess')
  
  // 엔터키로 검색
  document.getElementById('competency-search').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      searchCompetencies()
    }
  })
})
